<?php

namespace Fossil\Tests;

require_once 'vfsStream/vfsStream.php';
require_once 'vfsStreamPermissionsVisitor.php';
require_once "mocks/MockContainer.php";

use Fossil\Settings;

/**
 * Test class for Settings.
 * Generated by PHPUnit on 2011-09-10 at 17:21:42.
 */
class SettingsTest extends FossilTestCase {
    /**
     * @var Fossil\Settings
     */
    protected $object;
    
    public static function freshenVirtualFilesystem() {
        // Copy data in from fixture
        \vfsStream::copyFromFileSystem(__DIR__ . DIRECTORY_SEPARATOR . "fixtures" . DIRECTORY_SEPARATOR . "SettingsTest", self::$vfsRoot);
        // And fix broken permissions
        \vfsStream::inspect(new \vfsStreamPermissionsVisitor());
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
//        self::freshenVirtualFilesystem();
        $this->object = self::$container->get("Settings");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Fossil\Settings::__destruct
     */
    public function test__destruct() {
        // TODO: Test to make sure that the fossil data is dumped to settings.yml
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fossil\Settings::isBootstrapped
     */
    public function testIsBootstrapped() {
        // Test that the default settings (basic, for unit testing) are not bootstrapped
        $this->assertTrue($this->object->isBootstrapped());
        // Test that the sample settings are bootstrapped
        $sampleSet = new Settings(self::$container, \vfsStream::url("sampleSettings.yml"));
        $this->assertTrue($sampleSet->isBootstrapped());
        // And that the empty settings are not bootstrapped
        $emptySet = new Settings(self::$container, \vfsStream::url("emptySettings.yml"));
        $this->assertFalse($emptySet->isBootstrapped());
        // And that non-existant settings are not bootstrapped
        $nonExtSet = new Settings(self::$container, \vfsStream::url("nonExistantSettings.yml"));
        $this->assertFalse($nonExtSet->isBootstrapped());
    }

    /**
     * @todo Implement testGet().
     * @covers Fossil\Settings::get
     */
    public function testGet() {
        // Test that a newly set value is returned properly
        $this->object->set("testGet", "get1", "Foobar");
        $this->assertEquals("Foobar", $this->object->get("testGet", "get1"));
        // Test that a pre-set value is returned properly
        $this->assertEquals("users,forums,schedule", $this->object->get("Fossil", "plugins"));
        // Test that an unset value without default is not returned
        $this->assertNull($this->object->get("testGet", "get2"));
        // Test that an unset value with default is returned
        $this->assertEquals("42", $this->object->get("testGet", "get3", "42"));
        // Test that complex types (read: arrays/dicts) can be set and retrieved
        $this->object->set("testGet", "get4", array("Foo" => "Bar"));
        $this->assertInternalType("array", $this->object->get("testGet", "get4"));
        // Test that complex types can be retrieved from a backing file
        $this->assertInternalType("array", $this->object->get("Fossil", "Drivers"));
        // And that they can be retrieved from the DB
        $this->object->set("testGet", "get5", array("Foo" => "Bar2"));
        $newSettings = new Settings(self::$container);
        $this->assertInternalType("array", $newSettings->get("testGet", "get5"));
    }

    /**
     * @todo Implement testSet().
     * @covers Fossil\Settings::set
     */
    public function testSet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
