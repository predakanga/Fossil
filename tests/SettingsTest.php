<?php

namespace Fossil\Tests;

require_once 'vfsStream/vfsStream.php';
require_once 'vfsStreamPermissionsVisitor.php';
require_once "mocks/MockContainer.php";

use Fossil\Settings;

/**
 * Test class for Settings.
 * Generated by PHPUnit on 2011-09-10 at 17:21:42.
 */
class SettingsTest extends \PHPUnit_Framework_TestCase {
    /** @var Fossil\ObjectContainer */
    protected static $container;
    /**
     * @var Fossil\Settings
     */
    protected $object;
    /**
     * @var vfsStreamDirectory
     */
    protected static $vfsRoot;

    public static function setUpBeforeClass() {
        self::$vfsRoot = \vfsStream::setup();
        self::freshenVirtualFilesystem();
        self::$container = new Mocks\MockContainer(true);
    }
    
    public static function tearDownAfterClass() {
        self::$container = null;
    }
    
    public static function freshenVirtualFilesystem() {
        // Copy data in from fixture
        \vfsStream::copyFromFileSystem(__DIR__ . DIRECTORY_SEPARATOR . "fixtures" . DIRECTORY_SEPARATOR . "SettingsTest", self::$vfsRoot);
        // And fix broken permissions
        \vfsStream::inspect(new \vfsStreamPermissionsVisitor());
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
//        self::freshenVirtualFilesystem();
        $this->object = self::$container->get("Settings");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @todo Implement test__destruct().
     */
    public function test__destruct() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fossil\Settings::isBootstrapped
     */
    public function testIsBootstrapped() {
        // Test that the default settings (non-existant for unit testing) are not bootstrapped
        $this->assertFalse($this->object->isBootstrapped());
        // Test that the sample settings are bootstrapped
        $sampleSet = new Settings(self::$container, \vfsStream::url("sampleSettings.yml"));
        $this->assertTrue($sampleSet->isBootstrapped());
        // And that the empty settings are not bootstrapped
        $emptySet = new Settings(self::$container, \vfsStream::url("emptySettings.yml"));
        $this->assertFalse($emptySet->isBootstrapped());
    }

    /**
     * @todo Implement testGet().
     * @covers Fossil\Settings::get
     */
    public function testGet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSet().
     * @covers Fossil\Settings::set
     */
    public function testSet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
